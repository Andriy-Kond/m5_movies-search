{"version":3,"file":"static/js/314.fb362659.chunk.js","mappings":"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","sources":["components/Cast.jsx","services/fetchMovies.js","services/imagesConfigurations.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport fetchMovies from \"services/fetchMovies\";\r\nimport imagesConfigurations from \"services/imagesConfigurations\";\r\nimport noUser from \"../imgs/noUser.jpg\";\r\n\r\nfunction Cast() {\r\n  const { movieId } = useParams();\r\n  const [cast, setCast] = useState([]);\r\n  const [crew, setCrew] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // https://api.themoviedb.org/3/movie/{movie_id}/credits\r\n    async function getRequest() {\r\n      const currentRequestUrl = `movie/${movieId}/credits`;\r\n      const result = await fetchMovies(currentRequestUrl);\r\n      console.log(\"getRequest >> result:::\", result.data);\r\n      setCast(result.data.cast);\r\n      setCrew(result.data.crew);\r\n    }\r\n    getRequest();\r\n  }, [movieId]);\r\n\r\n  const { images } = imagesConfigurations;\r\n\r\n  return (\r\n    <>\r\n      <h2>Cast</h2>\r\n      <ul>\r\n        {cast.length > 0 ? (\r\n          cast.map(({ id, name, character, profile_path }) => (\r\n            <li key={id}>\r\n              <img\r\n                src={\r\n                  profile_path\r\n                    ? `${images.secure_base_url}w185/${profile_path}`\r\n                    : noUser\r\n                }\r\n                alt={`${name}`}\r\n                width={185}\r\n              />\r\n              <h3>Actor: {name}</h3>\r\n              <p>Character: {character}</p>\r\n            </li>\r\n          ))\r\n        ) : (\r\n          <h3>We don't have cast info for this movie</h3>\r\n        )}\r\n      </ul>\r\n      <h2>Crew</h2>\r\n      <ul>\r\n        {crew.length > 0 ? (\r\n          crew.map(({ name, job, profile_path }) => {\r\n            console.log(\"crew.map >> profile_path:::\", profile_path);\r\n\r\n            return (\r\n              <li>\r\n                <img\r\n                  src={\r\n                    profile_path\r\n                      ? `${images.base_url}w185/${profile_path}`\r\n                      : noUser\r\n                  }\r\n                  alt={`${name}`}\r\n                  width={185}\r\n                />\r\n                <h3>Actor: {name}</h3>\r\n                <p>Job: {job}</p>\r\n              </li>\r\n            );\r\n          })\r\n        ) : (\r\n          <h3>We don't have crew info for this movie</h3>\r\n        )}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Cast;\r\n","import axios from \"axios\";\r\nimport { Notify } from \"notiflix/build/notiflix-notify-aio\";\r\n\r\nNotify.init({\r\n  width: \"300px\",\r\n  position: \"right-bottom\",\r\n  // timeout: 2000,\r\n  clickToClose: false,\r\n  cssAnimationStyle: \"from-right\",\r\n});\r\n\r\nconst MAIN_POINT = \"https://api.themoviedb.org/3\";\r\nconst API_KEY = \"4bbdf91bf3cd1196a212f990d3c9214f\";\r\n\r\nasync function fetchMovies(currentRequestUrl, searchParams = \"\") {\r\n  const params = {\r\n    api_key: API_KEY,\r\n    language: \"en-US\",\r\n    ...searchParams,\r\n  };\r\n\r\n  const stringParams = new URLSearchParams(params).toString(); // перетворення params у рядок з відповідними символами & і =\r\n\r\n  // http запит\r\n  const options = {\r\n    method: \"GET\",\r\n    headers: {\r\n      accept: \"application/json\",\r\n      Authorization:\r\n        \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI0YmJkZjkxYmYzY2QxMTk2YTIxMmY5OTBkM2M5MjE0ZiIsIm5iZiI6MTcyNTUzNDM4Mi41ODIyMjQsInN1YiI6IjY0MjUzOTUyOTYwY2RlMDA3NzExYWJmOCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.7FvFAlAMJ1N-rqiBwKrtNZfTcOAUsU-k3s61vxQmHGw\",\r\n    },\r\n  };\r\n\r\n  const URL = `${MAIN_POINT}/${currentRequestUrl}?${stringParams}`;\r\n  try {\r\n    const receivedMovies = await axios.get(URL, options);\r\n\r\n    return receivedMovies;\r\n  } catch (error) {\r\n    Notify.failure(error.message);\r\n  }\r\n}\r\n\r\nexport default fetchMovies;\r\n","// https://api.themoviedb.org/3/configuration\r\nconst imagesConfigurations = {\r\n  images: {\r\n    base_url: \"http://image.tmdb.org/t/p/\",\r\n    secure_base_url: \"https://image.tmdb.org/t/p/\",\r\n    backdrop_sizes: [\"w300\", \"w780\", \"w1280\", \"original\"],\r\n    logo_sizes: [\"w45\", \"w92\", \"w154\", \"w185\", \"w300\", \"w500\", \"original\"],\r\n    poster_sizes: [\"w92\", \"w154\", \"w185\", \"w342\", \"w500\", \"w780\", \"original\"],\r\n    profile_sizes: [\"w45\", \"w185\", \"h632\", \"original\"],\r\n    still_sizes: [\"w92\", \"w185\", \"w300\", \"original\"],\r\n  },\r\n\r\n  change_keys: [\r\n    \"adult\",\r\n    \"air_date\",\r\n    \"also_known_as\",\r\n    \"alternative_titles\",\r\n    \"biography\",\r\n    \"birthday\",\r\n    \"budget\",\r\n    \"cast\",\r\n    \"certifications\",\r\n    \"character_names\",\r\n    \"created_by\",\r\n    \"crew\",\r\n    \"deathday\",\r\n    \"episode\",\r\n    \"episode_number\",\r\n    \"episode_run_time\",\r\n    \"freebase_id\",\r\n    \"freebase_mid\",\r\n    \"general\",\r\n    \"genres\",\r\n    \"guest_stars\",\r\n    \"homepage\",\r\n    \"images\",\r\n    \"imdb_id\",\r\n    \"languages\",\r\n    \"name\",\r\n    \"network\",\r\n    \"origin_country\",\r\n    \"original_name\",\r\n    \"original_title\",\r\n    \"overview\",\r\n    \"parts\",\r\n    \"place_of_birth\",\r\n    \"plot_keywords\",\r\n    \"production_code\",\r\n    \"production_companies\",\r\n    \"production_countries\",\r\n    \"releases\",\r\n    \"revenue\",\r\n    \"runtime\",\r\n    \"season\",\r\n    \"season_number\",\r\n    \"season_regular\",\r\n    \"spoken_languages\",\r\n    \"status\",\r\n    \"tagline\",\r\n    \"title\",\r\n    \"translations\",\r\n    \"tvdb_id\",\r\n    \"tvrage_id\",\r\n    \"type\",\r\n    \"video\",\r\n    \"videos\",\r\n  ],\r\n};\r\n\r\nexport default imagesConfigurations;\r\n"],"names":["movieId","useParams","cast","setCast","useState","crew","setCrew","useEffect","async","currentRequestUrl","result","fetchMovies","console","log","data","getRequest","images","imagesConfigurations","_jsxs","_Fragment","children","_jsx","length","map","_ref","id","name","character","profile_path","src","secure_base_url","noUser","alt","width","_ref2","job","base_url","Notify","init","position","clickToClose","cssAnimationStyle","params","api_key","language","arguments","undefined","options","method","headers","accept","Authorization","URL","URLSearchParams","toString","axios","get","error","failure","message","backdrop_sizes","logo_sizes","poster_sizes","profile_sizes","still_sizes","change_keys"],"sourceRoot":""}